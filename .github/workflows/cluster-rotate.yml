name: "CaaSP 4"
on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"

jobs:
  deploy_caasp:
    name: Deploy CaaSP
    runs-on: ecosystem-ci-runners
    env:
      NUMBER_OF_CLUSTERS: 2
      GH_API_HEADER: "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
    defaults:
      run:
        working-directory: deploy_caasp
    steps:
      - name: Setup workspace
        run: |
          if [ ! -d "deploy_caasp" ]; then
            mkdir deploy_caasp
          fi
        working-directory: .
      - name: Fetch previous deployment cluster-id artifact
        if: github.actor != 'local'
        id: fetch_artifacts
        run: |
          rm -rf CLUSTER_ID
          artifact_name=cluster-id
          previous_runs_artifacts_url="$(curl -sH "${GH_API_HEADER}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/cluster-rotate.yml/runs\?status\=completed \
            | jq -r ".workflow_runs[].artifacts_url")"
          for artifact_url in ${previous_runs_artifacts_url}; do
            cluster_id_artifact_download_url=$(curl -sH "${GH_API_HEADER}" ${artifact_url} \
              | jq -rc ".artifacts[] | select(.name==\"${artifact_name}\") | .archive_download_url")
            if [[ ! -z ${cluster_id_artifact_download_url} ]]; then
              wget --header="${GH_API_HEADER}" ${cluster_id_artifact_download_url} -O ${artifact_name}.zip
              unzip -o ${artifact_name}.zip
              break
            fi
          done
          echo "::set-output name=previous_runs_artifacts_url::${previous_runs_artifacts_url//$'\n'/'%0A'}"
      - name: Set cluster ID and prefix
        id: set_cluster_id
        run: |
          cluster_id_file="CLUSTER_ID"
          if [ -f "${cluster_id_file}" ]; then
            active_cluster_id=$(cat ${cluster_id_file})
            echo "::set-output name=active_cluster_id::${active_cluster_id}"
          fi
          if [[ -z "${active_cluster_id}" || ${active_cluster_id} = ${NUMBER_OF_CLUSTERS} ]]; then
            cluster_id=1
          else
            cluster_id=$(($active_cluster_id + 1))
          fi
          git_repository="${GITHUB_REPOSITORY#*/}"
          git_repository_owner="${GITHUB_REPOSITORY%/*}"
          cluster_prefix="${git_repository}-ci"
          if [[ "${GITHUB_ACTOR}" = "local" || "${git_repository_owner}" != "suse" ]]; then
            cluster_prefix="${git_repository_owner}"
          fi
          echo "::set-output name=cluster_id::${cluster_id}"
          echo "::set-env name=CLUSTER_NAME::${cluster_prefix}${cluster_id}"
          echo "::set-env name=ARTIFACT_DIR::catapult/build${cluster_prefix}${cluster_id}"
      - name: Drop OPENRC
        env:
          sec_openrc: ${{ secrets.OPENRC }}
        run: echo "$sec_openrc" | base64 -d > ./.openrc
      - name: Get deployment artifacts from previous run
        if: steps.fetch_artifacts.outputs.previous_runs_artifacts_url && github.actor != 'local'
        id: artifact_download
        run: |
          artifact_name=deployment-${CLUSTER_NAME}
          previous_runs_artifacts_url="${{ steps.fetch_artifacts.outputs.previous_runs_artifacts_url }}"
          for artifact_url in ${previous_runs_artifacts_url} ; do
            artifact_download_url=$(curl -sH "${GH_API_HEADER}" ${artifact_url} \
              | jq -rc ".artifacts[] | select(.name==\"${artifact_name}\") | .archive_download_url")
            if [[ ! -z "${artifact_download_url}" ]]; then
              wget --header="${GH_API_HEADER}" ${artifact_download_url} -O ${artifact_name}.zip
              rm -rf ${ARTIFACT_DIR}
              mkdir -p ${ARTIFACT_DIR}
              unzip ${artifact_name}.zip -d ${ARTIFACT_DIR}
              echo "::set-output name=succeeded::true"
              break
            fi
          done
      - name: Delete non kubernetes system namespaces
        if: steps.artifact_download.outputs.succeeded || github.actor == 'local'
        run: |
          if [ -f "${ARTIFACT_DIR}/kubeconfig" ]; then
            export KUBECONFIG="${ARTIFACT_DIR}/kubeconfig"
            for n in $(kubectl get ns -o=custom-columns=kube-:.metadata.name | grep -v "kube-\|default"); do
              kubectl delete ns $n
            done
          fi
      - name: Delete virtual resources on ECP
        if: steps.artifact_download.outputs.succeeded || github.actor == 'local'
        run: |
          if [ -d "${ARTIFACT_DIR}/deployment" ]; then
            . ./.openrc
            pushd ${ARTIFACT_DIR}/deployment
            terraform init
            terraform destroy -auto-approve
            popd
            rm -rf ${ARTIFACT_DIR}
          fi
      - name: Checkout catapult repository
        run: |
          if [ ! -d "catapult" ]; then
            git clone https://github.com/SUSE/catapult.git --depth 1
          else
            cd catapult
            git fetch origin master
            git reset --hard origin/master
          fi
      - name: Deploy CaaSP
        id: deploy_cluster
        run: |
          . ./.openrc
          rm -rf agent.sock
          eval $(ssh-agent -a $(pwd)/agent.sock)
          cd catapult
          echo "::set-output name=step_reached::true"
          OWNER=${CLUSTER_NAME} BACKEND=caasp4os make k8s
          echo "::set-env name=KUBECONFIG::$(realpath build${{ env.CLUSTER_NAME }}/kubeconfig)"
      - name: Archive deployment artifacts
        if: always() && steps.deploy_cluster.outputs.step_reached && github.actor != 'local'
        uses: actions/upload-artifact@v2
        with:
          name: deployment-${{ env.CLUSTER_NAME }}
          path: |
            deploy_caasp/catapult/build${{ env.CLUSTER_NAME }}
            !deploy_caasp/catapult/build${{ env.CLUSTER_NAME }}/bin
      - name: Deploy NGINX ingress controller
        run: |
          cat << EOF | tee nginx-ingress-config-values.yaml
          controller:
            service:
              enableHttp: false
              type: LoadBalancer
            replicaCount: 1
          EOF
          helm repo add suse https://kubernetes-charts.suse.com
          kubectl create ns nginx-ingress
          helm -n nginx-ingress install nginx-ingress suse/nginx-ingress -f nginx-ingress-config-values.yaml --wait --timeout 5m
      - name: Save new CLUSTER_ID
        run: echo "${{ steps.set_cluster_id.outputs.cluster_id }}" > CLUSTER_ID
      - name: Archive cluster ID
        if: always() && github.actor != 'local'
        uses: actions/upload-artifact@v2
        with:
          name: cluster-id
          path: deploy_caasp/CLUSTER_ID