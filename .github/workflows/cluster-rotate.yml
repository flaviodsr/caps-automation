name: "[Periodic|CaaSP 4] Rotate Cluster"
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */3 * * *"

jobs:
  redeploy_caasp_cluster:
    name: Redeploy and set active cluster
    runs-on: ecp-runners
    env:
      CLUSTER_PREFIX: registryci
      NUMBER_OF_CLUSTERS: 2
    steps:
      - name: Find out which cluster to redeploy
        id: get_cluster
        env:
          sec_active_cluster: ${{ secrets.ACTIVE_CLUSTER }}
        run: |
          active_cluster=$(echo $sec_active_cluster | base64 -d)
          active_cluster_id=${active_cluster: -1}
          if [[ -z "${{ secrets.ACTIVE_CLUSTER }}" || ${active_cluster_id} = ${NUMBER_OF_CLUSTERS} ]]; then
            cluster_id=1
          else
            cluster_id=$(($active_cluster_id + 1))
          fi
          echo "::set-output name=cluster_to_deploy::$(echo $CLUSTER_PREFIX$cluster_id | base64)"
          echo "::set-output name=last_run_secret_name::CLUSTER_ROTATE_RUN_ID_${CLUSTER_PREFIX}${cluster_id}"
          echo "::set-env name=CLUSTER_NAME::${CLUSTER_PREFIX}${cluster_id}"
          echo "::warning::Redeploying cluster ${CLUSTER_PREFIX}${cluster_id}"
      - name: Drop OPENRC
        env:
          sec_openrc: ${{ secrets.OPENRC }}
        run: echo "$sec_openrc" | base64 -d > ./.openrc
      - name: Get arficats from previuos run
        id: artifact_download
        run: |
          if [[ ! -z "${{ secrets[steps.get_cluster.outputs.last_run_secret_name] }}" ]]; then
            artifact_name=deployment-${CLUSTER_NAME}
            URL="https://api.github.com/repos/flaviodsr/registry/actions/runs/${{ secrets[steps.get_cluster.outputs.last_run_secret_name] }}/artifacts"
            artifact_url=$(curl -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $URL | jq -rc ".artifacts[] | select(.name==\"${artifact_name}\") | .archive_download_url")
            curl -LH "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $artifact_url --output ${artifact_name}.zip
            rm -rf ${artifact_name}
            mkdir ${artifact_name}
            unzip ${artifact_name}.zip -d ${artifact_name}
            echo "::set-output name=succeeded::true"
          fi
      - name: '[CLEANUP] Delete non kubernetes system namespaces'
        if: ${{ steps.artifact_download.outputs.succeeded }}
        run: |
          if [[ -f "deployment-${CLUSTER_NAME}/kubeconfig" ]]; then
            export KUBECONFIG=deployment-${CLUSTER_NAME}/kubeconfig
            for n in $(kubectl get ns -o=custom-columns=kube-:.metadata.name | grep -v "kube-\|default"); do
              kubectl delete ns $n
            done
          fi
      - name: '[CLEANUP] Delete cluster resources on ECP'
        if: ${{ steps.artifact_download.outputs.succeeded }}
        run: |
          . ./.openrc
          cd deployment-${CLUSTER_NAME}/deployment
          terraform init
          terraform destroy -auto-approve
      - name: Checkout catapult repository
        uses: actions/checkout@v2
        with:
          repository: SUSE/catapult
          path: catapult
      - name: Deploy new CaaSP cluster
        id: deploy_cluster
        run: |
          . ./.openrc
          cd catapult
          eval $(ssh-agent)
          echo "::set-output name=step_reached::true"
          OWNER=${CLUSTER_NAME} BACKEND=caasp4os make k8s
          echo "::set-output name=kubeconfig::$(base64 -w0 build${{ env.CLUSTER_NAME }}/kubeconfig)"
          echo "::set-env name=KUBECONFIG::$(realpath build${{ env.CLUSTER_NAME }}/kubeconfig)"
      - name: Archieve deployment artifacts
        if: always() && steps.deploy_cluster.outputs.step_reached
        uses: actions/upload-artifact@v2
        with:
          name: deployment-${{ env.CLUSTER_NAME }}
          path: |
            catapult/build${{ env.CLUSTER_NAME }}/deployment
            catapult/build${{ env.CLUSTER_NAME }}/id_rsa_shared
            catapult/build${{ env.CLUSTER_NAME }}/kubeconfig
      - name: Update CLUSTER_ROTATE_RUN_ID_${{ env.CLUSTER_NAME }}
        if: always() && steps.deploy_cluster.outputs.step_reached
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: CLUSTER_ROTATE_RUN_ID_${{ env.CLUSTER_NAME }}
          value: ${{ github.run_id }}
          repository: flaviodsr/registry
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Deploy NGINX ingress controller
        run: |
          cat << EOF | tee nginx-ingress-config-values.yaml
          controller:
            service:
              enableHttp: false
              type: LoadBalancer
            replicaCount: 1
          EOF
          helm repo add suse https://kubernetes-charts.suse.com
          kubectl create ns nginx-ingress
          helm -n nginx-ingress install nginx-ingress suse/nginx-ingress -f nginx-ingress-config-values.yaml --wait --timeout 5m
          kubectl -n nginx-ingress get pods
          kubectl -n nginx-ingress get svc
      - name: Update KUBECONFIG_${{ env.CLUSTER_NAME }}
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: KUBECONFIG_${{ env.CLUSTER_NAME }}
          value: ${{ steps.deploy_cluster.outputs.kubeconfig }}
          repository: flaviodsr/registry
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Update ACTIVE_CLUSTER
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: ACTIVE_CLUSTER
          value: ${{ steps.get_cluster.outputs.cluster_to_deploy }}
          repository: flaviodsr/registry
          token: ${{ secrets.REPO_ACCESS_TOKEN }}