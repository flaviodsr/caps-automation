name: "[CaaSP 4] Rotate Cluster"
on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

jobs:
  redeploy_caasp_cluster:
    name: Redeploy and set active cluster
    runs-on: ecp-runners
    env:
      CLUSTER_PREFIX: registry-ci
      NUMBER_OF_CLUSTERS: 2
    steps:
    - name: Create GitHub deployment
      uses: tallyb/deployments@0.5.0
      id: deployment
      with:
        step: start
        token: ${{ github.token }}
        env: caasp-registry-ci
        desc: ${{ github.run_id }}
    - run: exit 1
    - name: Create GitHub deployment
      uses: tallyb/deployments@0.5.0
      if: always()
      with:
        step: finish
        status: ${{ job.status }}
        token: ${{ github.token }}
        env: caasp-registry-ci
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      # - name: Find out which cluster to redeploy
      #   run: |
      #     deployments_url=https://api.github.com/repos/${{ github.repository }}/deployments
      #     environments=$(curl -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" ${deployments_url}\?)
      # - name: Drop OPENRC
      #   env:
      #     sec_openrc: ${{ secrets.OPENRC }}
      #   run: echo "$sec_openrc" | base64 -d > ./.openrc
      # - name: '[CLEAN UP]Get catapult arficats from previuos run'
      #   if: ${{ env.PREVIOUS_JOB_ARTIFACTS_URL }}
      #   id: artifact_download
      #   run: |
      #     artifact_name=deployment-${CLUSTER_NAME}
      #     artifact_url=$(curl -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" ${PREVIOUS_JOB_ARTIFACTS_URL} \
      #       | jq -rc ".artifacts[] | select(.name==\"${artifact_name}\") | .archive_download_url")
      #     curl -LH "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $artifact_url --output ${artifact_name}.zip
      #     rm -rf ${artifact_name}
      #     mkdir ${artifact_name}
      #     unzip ${artifact_name}.zip -d ${artifact_name}
      #     echo "::set-output name=succeeded::true"
      # - name: '[CLEAN UP] Delete non kubernetes system namespaces'
      #   if: ${{ steps.artifact_download.outputs.succeeded }}
      #   run: |
      #     if [[ -f "deployment-${CLUSTER_NAME}/kubeconfig" ]]; then
      #       export KUBECONFIG=deployment-${CLUSTER_NAME}/kubeconfig
      #       for n in $(kubectl get ns -o=custom-columns=kube-:.metadata.name | grep -v "kube-\|default"); do
      #         kubectl delete ns $n
      #       done
      #     fi
      # - name: '[CLEAN UP] Delete virtual resources on ECP'
      #   if: ${{ steps.artifact_download.outputs.succeeded }}
      #   run: |
      #     . ./.openrc
      #     cd deployment-${CLUSTER_NAME}/deployment
      #     terraform init
      #     terraform destroy -auto-approve
      # - name: Checkout catapult repository
      #   uses: actions/checkout@v2
      #   with:
      #     repository: SUSE/catapult
      #     path: catapult
      # - name: Deploy new CaaSP cluster
      #   id: deploy_cluster
      #   run: |
      #     . ./.openrc
      #     cd catapult
      #     eval $(ssh-agent)
      #     echo "::set-output name=step_reached::true"
      #     OWNER=${CLUSTER_NAME} BACKEND=caasp4os make k8s
      #     echo "::set-output name=kubeconfig::$(base64 -w0 build${{ env.CLUSTER_NAME }}/kubeconfig)"
      #     echo "::set-env name=KUBECONFIG::$(realpath build${{ env.CLUSTER_NAME }}/kubeconfig)"
      # - name: Archieve deployment artifacts
      #   if: always() && steps.deploy_cluster.outputs.step_reached
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: deployment-${{ env.CLUSTER_NAME }}
      #     path: |
      #       catapult/build${{ env.CLUSTER_NAME }}/deployment
      #       catapult/build${{ env.CLUSTER_NAME }}/id_rsa_shared
      #       catapult/build${{ env.CLUSTER_NAME }}/kubeconfig
      # - name: Deploy NGINX ingress controller
      #   run: |
      #     cat << EOF | tee nginx-ingress-config-values.yaml
      #     controller:
      #       service:
      #         enableHttp: false
      #         type: LoadBalancer
      #       replicaCount: 1
      #     EOF
      #     helm repo add suse https://kubernetes-charts.suse.com
      #     kubectl create ns nginx-ingress
      #     helm -n nginx-ingress install nginx-ingress suse/nginx-ingress -f nginx-ingress-config-values.yaml --wait --timeout 5m
      #     kubectl -n nginx-ingress get pods
      #     kubectl -n nginx-ingress get svc
      # - name: Keep current cluster as active if this deployment fails
      #   if: failure() && ${{ env.ACTIVE_CLUSTER_ID }}
      #   run: echo ${ACTIVE_CLUSTER_ID} > CLUSTER_ID
      # - name: Save active cluster ID for ${{ env.CLUSTER_NAME }}
      #   if: always()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cluster-id
      #     path: CLUSTER_ID